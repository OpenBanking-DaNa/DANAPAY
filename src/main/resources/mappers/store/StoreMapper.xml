<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dana.danapay.store.model.dao.StoreMapper">

    <resultMap id="storeResponse" type="com.dana.danapay.store.model.dto.StoreDTO">
        <id property="sCode" column="S_CODE"/>
        <result property="sId" column="S_ID"/>
        <result property="sPassword" column="S_PASSWORD"/>
        <result property="sName" column="S_NAME"/>
        <result property="sIsOpen" column="S_IS_OPEN"/>
        <result property="sPhone" column="S_PHONE"/>
        <result property="sAddress" column="S_ADDRESS"/>
        <result property="sBiznumber" column="S_BIZNUMBER"/>
        <result property="sX" column="S_X"/>
        <result property="sY" column="S_Y"/>
        <collection property="menuList" resultMap="menuResponse"/>
    </resultMap>

    <resultMap id="menuResponse" type="com.dana.danapay.menu.model.dto.menuDTO">
        <id property="menuCode" column="MENU_CODE"/>
        <result property="menuName" column="MENU_NAME"/>
        <result property="menuPrice" column="MENU_PRICE"/>
        <result property="isOrder" column="ISORDER"/>
        <result property="sCode" column="S_CODE"/>
    </resultMap>

<!--  스토어 등록  -->
    <insert id="insertNewStore" parameterType="com.dana.danapay.store.model.dto.StoreDTO" useGeneratedKeys="true" keyProperty="sCode">

        INSERT INTO STORE (S_CODE, S_ID, S_PASSWORD, S_NAME, S_PHONE, S_ADDRESS, S_BIZNUMBER, S_X, S_Y)
        SELECT store_seq.nextval, #{sId}, #{sPassword}, #{sName},
               #{sPhone}, #{sAddress}, #{sBiznumber},
               #{sX}, #{sY}
        FROM dual
        WHERE NOT EXISTS (
            SELECT S_ID, S_BIZNUMBER
            FROM STORE
            WHERE S_ID = #{sId} OR S_BIZNUMBER = #{sBiznumber}
        )
        <selectKey keyProperty="sCode" resultType="int" order="AFTER">
            SELECT store_seq.currval FROM DUAL
        </selectKey>
    </insert>

    <select id="selectStoreByCode" parameterType="int" resultMap="storeResponse">
        SELECT S_NAME, S_IS_OPEN, S_PHONE, S_ADDRESS, S_BIZNUMBER, S_CODE FROM STORE WHERE S_CODE = #{sCode}
    </select>

    <select id="selectTotalCount" >
        SELECT
            COUNT(DISTNACE_WGS84(#{sY}, #{sX}, C.S_Y, C.S_X)) as total_count,
            MIN(D.MENU_NAME) as menu_name
        FROM STORE C
        JOIN MENU D ON (C.S_CODE = D.S_CODE)
        WHERE (C.S_Y BETWEEN #{sY} - 0.019 AND #{sY} + 0.019) -- 2km이내
        AND (C.S_X BETWEEN #{sX} - 0.022 AND #{sX} + 0.022) -- 2km이내
        <if test="searchCondition == 'storeName'">
            AND C.S_NAME LIKE '%' || #{searchValue} || '%'
        </if>
        <if test="searchCondition == 'menuName'">
            AND D.MENU_NAME LIKE '%' || #{searchValue} || '%'
        </if>
        GROUP BY D.S_CODE
    </select>


    <select id="selectStoreList" resultMap="storeResponse" parameterType="map">
        SELECT
            A.RN,
            A.S_NAME,
            A.S_IS_OPEN,
            A.S_CODE,
            A.S_PHONE,
            A.S_ADDRESS,
            A.S_BIZNUMBER,
            A.S_X,
            A.S_Y,
            A.MENU_CODE,
            A.MENU_NAME,
            A.MENU_PRICE,
            A.ISORDER
        FROM (
            SELECT
                ROWNUM RN,
                C.S_NAME,
                C.S_IS_OPEN,
                C.S_CODE,
                C.S_PHONE,
                C.S_ADDRESS,
                C.S_BIZNUMBER,
                C.S_X,
                C.S_Y,
                D.MENU_CODE,
                D.MENU_NAME,
                D.MENU_PRICE,
                D.ISORDER,
                DISTNACE_WGS84(#{location.sY}, #{location.sX}, C.S_Y, C.S_X) AS distance  -- 거리
            FROM (
                SELECT
                    C.S_NAME,
                    C.S_IS_OPEN,
                    C.S_CODE,
                    C.S_PHONE,
                    C.S_ADDRESS,
                    C.S_BIZNUMBER,
                    C.S_X,
                    C.S_Y
                FROM STORE C
                WHERE (C.S_Y BETWEEN #{location.sY} - 0.019 AND #{location.sY} + 0.019)  -- 위도 약 2km 이내
                  AND (C.S_X BETWEEN #{location.sX} - 0.022 AND #{location.sX} + 0.022)  -- 경도 약 2km 이내
                  <if test="criteria.searchCondition == 'storeName'">
                  AND C.S_NAME LIKE '%' || #{criteria.searchValue} || '%'
                  </if>
            ) C
            LEFT JOIN (
                SELECT
                    S_CODE,
                    MIN(MENU_CODE) AS MENU_CODE,
                    MIN(MENU_NAME) AS MENU_NAME,
                    MIN(MENU_PRICE) AS MENU_PRICE,
                    MIN(ISORDER) AS ISORDER
                FROM MENU
                <where>
                    1=1
                    <if test="criteria.searchCondition == 'menuName'">
                    AND MENU_NAME LIKE '%' || #{searchValue} || '%'
                    </if>
                </where>
                GROUP BY S_CODE
                ORDER BY distance DESC
            ) D ON (C.S_CODE = D.S_CODE)
          <![CDATA[
            WHERE ROWNUM <= #{criteria.endRow}
          ]]>
        ) A
        WHERE A.RN >= #{criteria.startRow}
    </select>

    <update id="wholeUpdateStore">
        UPDATE STORE SET
              S_NAME = #{sName}
            , S_IS_OPEN = #{sIsOpen}
            , S_PHONE = #{sPhone}
            , S_ADDRESS = #{sAddress}
            , S_X = #{sX}
            , S_Y = #{sY}
        WHERE S_CODE = #{sCode} AND S_ID = #{sId}
    </update>

    <update id="anyUpdateStore">
        UPDATE STORE SET S_CODE = #{sCode}
        <if test="sName != null and sName != ''">
            , S_NAME = #{sName}
        </if>
        <if test="sIsOpen != null and sIsOpen != ''">
            , S_IS_OPEN = #{sIsOpen}
        </if>
        <if test="sPhone != null and sPhone != ''">
            , S_PHONE = #{sPhone}
        </if>
        <if test="sAddress != null and sAddress != ''">
            , S_ADDRESS = #{sAddress}
        </if>
        <if test="sX != null and sX != '' and sX != 0">
            , S_X = #{sX}
        </if>
        <if test="sY != null and sY != '' and sY != 0">
            , S_Y = #{sY}
        </if>
        <if test="sPassword != null and sPassword != '' and sPassword != 0">
            , S_PASSWORD = #{sPassword}
        </if>
        WHERE S_CODE = #{sCode} AND S_ID = #{sId}
    </update>

    <delete id="deleteStore">
        DELETE
        FROM STORE
        WHERE S_CODE = #{sCode} AND S_ID = #{sId}
    </delete>



</mapper>